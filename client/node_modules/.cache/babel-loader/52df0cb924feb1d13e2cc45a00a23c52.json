{"ast":null,"code":"var _jsxFileName = \"/Users/yazanalmatar/Desktop/dashboard/client/src/components/InventoryChart.js\";\nimport React from \"react\";\nimport Chart from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\n\nclass InventoryChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleData = () => {\n      const datasetsData = [];\n      const tempDates = [];\n      var dates = [];\n      var datasetsObject = {};\n      const data = this.state.data;\n      var datesArray = data[0].inventory;\n      datesArray[3].date = \"2019-08-30T16:05:55.913Z\";\n\n      function SortDate() {\n        data[0].inventory.sort(function (temp1, temp2) {\n          return new Date(temp1.date) - new Date(temp2.date);\n        });\n      }\n\n      SortDate();\n      data[0].inventory.map(inv => {});\n      data[0].variants.map((variant, i) => {\n        datasetsObject[variant.id] = {\n          \"label\": variant.title,\n          \"inventory\": []\n        };\n      });\n      data[0].inventory.map(inv => {\n        tempDates.push(inv.date);\n        inv.variants.map(variant => {\n          datasetsObject[variant.id].inventory.push(variant.inventory_quantity);\n        });\n      });\n      tempDates.map(date => {\n        var value = date.split(\"T\")[0];\n        dates.push(value);\n      });\n      this.setState({\n        datesArr: dates\n      });\n\n      function getRandomColor() {\n        var letters = '0123456789ABCDEF';\n        var color = '#';\n\n        for (var i = 0; i < 6; i++) {\n          color += letters[Math.floor(Math.random() * 16)];\n        }\n\n        return color;\n      }\n\n      const IDs = Object.keys(datasetsObject);\n\n      for (var i = 0; i < IDs.length; i++) {\n        var finalObject = {\n          data: datasetsObject[IDs[i]].inventory,\n          borderColor: getRandomColor(),\n          label: \"Size: \".concat(datasetsObject[IDs[i]].label)\n        };\n        datasetsData.push(finalObject);\n      }\n\n      this.setState({\n        chartData: datasetsData\n      }); //console.log(datasetsObject)\n    };\n\n    this.state = {\n      data: this.props.data,\n      datesArr: [],\n      chartData: []\n    };\n  }\n\n  componentDidMount() {\n    //console.log(this.props.data)\n    this.handleData();\n  }\n\n  render() {\n    var data = {\n      labels: this.state.datesArr,\n      datasets: this.state.chartData,\n      backgroundColor: \"rgba(100, 0, 0, 0)\" //  [\n      //   {\n      //     label: \"My First dataset\",\n      //     //backgroundColor: \"rgb(255, 99, 132)\",\n      //     borderColor: \"rgb(255, 99, 132)\",\n      //     data: [0, 10, 5, 2, 20, 30, 45]\n      //   }\n      // ]\n\n    };\n    return React.createElement(\"div\", {\n      className: \"chart-comp-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Line, {\n      data: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default InventoryChart;","map":{"version":3,"sources":["/Users/yazanalmatar/Desktop/dashboard/client/src/components/InventoryChart.js"],"names":["React","Chart","Line","InventoryChart","Component","constructor","props","handleData","datasetsData","tempDates","dates","datasetsObject","data","state","datesArray","inventory","date","SortDate","sort","temp1","temp2","Date","map","inv","variants","variant","i","id","title","push","inventory_quantity","value","split","setState","datesArr","getRandomColor","letters","color","Math","floor","random","IDs","Object","keys","length","finalObject","borderColor","label","chartData","componentDidMount","render","labels","datasets","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,IAAT,QAAqB,iBAArB;;AAEA,MAAMC,cAAN,SAA6BH,KAAK,CAACI,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAcnBC,UAdmB,GAcN,MAAM;AACjB,YAAMC,YAAY,GAAG,EAArB;AACA,YAAMC,SAAS,GAAG,EAAlB;AACA,UAAIC,KAAK,GAAG,EAAZ;AACA,UAAIC,cAAc,GAAG,EAArB;AACA,YAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWD,IAAxB;AACA,UAAIE,UAAU,GAAGF,IAAI,CAAC,CAAD,CAAJ,CAAQG,SAAzB;AACAD,MAAAA,UAAU,CAAC,CAAD,CAAV,CAAcE,IAAd,GAAqB,0BAArB;;AAEA,eAASC,QAAT,GAAoB;AAClBL,QAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQG,SAAR,CAAkBG,IAAlB,CAAuB,UAASC,KAAT,EAAgBC,KAAhB,EAAuB;AAC5C,iBAAO,IAAIC,IAAJ,CAASF,KAAK,CAACH,IAAf,IAAuB,IAAIK,IAAJ,CAASD,KAAK,CAACJ,IAAf,CAA9B;AACD,SAFD;AAGD;;AACDC,MAAAA,QAAQ;AAERL,MAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQG,SAAR,CAAkBO,GAAlB,CAAsBC,GAAG,IAAE,CAE1B,CAFD;AAGAX,MAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQY,QAAR,CAAiBF,GAAjB,CAAqB,CAACG,OAAD,EAAUC,CAAV,KAAgB;AACnCf,QAAAA,cAAc,CAACc,OAAO,CAACE,EAAT,CAAd,GAA6B;AAC3B,mBAASF,OAAO,CAACG,KADU;AAE3B,uBAAa;AAFc,SAA7B;AAID,OALD;AAQAhB,MAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQG,SAAR,CAAkBO,GAAlB,CAAuBC,GAAD,IAAS;AAC7Bd,QAAAA,SAAS,CAACoB,IAAV,CAAeN,GAAG,CAACP,IAAnB;AACAO,QAAAA,GAAG,CAACC,QAAJ,CAAaF,GAAb,CAAkBG,OAAD,IAAa;AAC5Bd,UAAAA,cAAc,CAACc,OAAO,CAACE,EAAT,CAAd,CAA2BZ,SAA3B,CAAqCc,IAArC,CAA0CJ,OAAO,CAACK,kBAAlD;AACD,SAFD;AAGD,OALD;AAMArB,MAAAA,SAAS,CAACa,GAAV,CAAcN,IAAI,IAAG;AACnB,YAAIe,KAAK,GAAGf,IAAI,CAACgB,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAZ;AACAtB,QAAAA,KAAK,CAACmB,IAAN,CAAWE,KAAX;AACD,OAHD;AAIA,WAAKE,QAAL,CAAc;AAACC,QAAAA,QAAQ,EAACxB;AAAV,OAAd;;AACA,eAASyB,cAAT,GAA0B;AACxB,YAAIC,OAAO,GAAG,kBAAd;AACA,YAAIC,KAAK,GAAG,GAAZ;;AACA,aAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BW,UAAAA,KAAK,IAAID,OAAO,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAD,CAAhB;AACD;;AACD,eAAOH,KAAP;AACD;;AAED,YAAMI,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYhC,cAAZ,CAAZ;;AACA,WAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGe,GAAG,CAACG,MAAxB,EAAgClB,CAAC,EAAjC,EAAsC;AACpC,YAAImB,WAAW,GAAG;AAChBjC,UAAAA,IAAI,EAACD,cAAc,CAAC8B,GAAG,CAACf,CAAD,CAAJ,CAAd,CAAuBX,SADZ;AAEhB+B,UAAAA,WAAW,EAAEX,cAAc,EAFX;AAGhBY,UAAAA,KAAK,kBAAWpC,cAAc,CAAC8B,GAAG,CAACf,CAAD,CAAJ,CAAd,CAAuBqB,KAAlC;AAHW,SAAlB;AAKAvC,QAAAA,YAAY,CAACqB,IAAb,CAAkBgB,WAAlB;AACD;;AACD,WAAKZ,QAAL,CAAc;AAACe,QAAAA,SAAS,EAACxC;AAAX,OAAd,EAxDiB,CAyDrB;AACG,KAxEkB;;AAEjB,SAAKK,KAAL,GAAa;AACXD,MAAAA,IAAI,EAAE,KAAKN,KAAL,CAAWM,IADN;AAEXsB,MAAAA,QAAQ,EAAC,EAFE;AAGXc,MAAAA,SAAS,EAAE;AAHA,KAAb;AAKD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAK1C,UAAL;AACD;;AA8DD2C,EAAAA,MAAM,GAAG;AACP,QAAItC,IAAI,GAAG;AACTuC,MAAAA,MAAM,EAAE,KAAKtC,KAAL,CAAWqB,QADV;AAETkB,MAAAA,QAAQ,EAAC,KAAKvC,KAAL,CAAWmC,SAFX;AAGTK,MAAAA,eAAe,EAAC,oBAHP,CAIT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAXS,KAAX;AAaA,WACE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAEzC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AA7F0C;;AA+F7C,eAAeT,cAAf","sourcesContent":["import React from \"react\";\nimport Chart from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\n\nclass InventoryChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: this.props.data,\n      datesArr:[],\n      chartData: []\n    };\n  }\n  componentDidMount() {\n    //console.log(this.props.data)\n    this.handleData();\n  }\n \n\n  handleData = () => {\n    const datasetsData = [];\n    const tempDates = [];\n    var dates = [];\n    var datasetsObject = {};\n    const data = this.state.data;\n    var datesArray = data[0].inventory;\n    datesArray[3].date = \"2019-08-30T16:05:55.913Z\";\n\n    function SortDate() {\n      data[0].inventory.sort(function(temp1, temp2) {\n        return new Date(temp1.date) - new Date(temp2.date);\n      });\n    }\n    SortDate();\n\n    data[0].inventory.map(inv=>{\n      \n    })\n    data[0].variants.map((variant, i) => {\n      datasetsObject[variant.id] = {\n        \"label\": variant.title,\n        \"inventory\": []\n      }\n    });\n\n\n    data[0].inventory.map((inv) => {\n      tempDates.push(inv.date)\n      inv.variants.map((variant) => {\n        datasetsObject[variant.id].inventory.push(variant.inventory_quantity);\n      });\n    });\n    tempDates.map(date=> {\n      var value = date.split(\"T\")[0]\n      dates.push(value)\n    })\n    this.setState({datesArr:dates})\n    function getRandomColor() {\n      var letters = '0123456789ABCDEF';\n      var color = '#';\n      for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n      return color;\n    }\n    \n    const IDs = Object.keys(datasetsObject)\n    for (var i = 0; i < IDs.length; i ++) {    \n      var finalObject = {\n        data:datasetsObject[IDs[i]].inventory,\n        borderColor: getRandomColor(),\n        label: `Size: ${datasetsObject[IDs[i]].label}`\n      }\n      datasetsData.push(finalObject)\n    }\n    this.setState({chartData:datasetsData})\n//console.log(datasetsObject)\n  };\n  render() {\n    var data = {\n      labels: this.state.datesArr,\n      datasets:this.state.chartData,\n      backgroundColor:\"rgba(100, 0, 0, 0)\"\n      //  [\n      //   {\n      //     label: \"My First dataset\",\n      //     //backgroundColor: \"rgb(255, 99, 132)\",\n      //     borderColor: \"rgb(255, 99, 132)\",\n      //     data: [0, 10, 5, 2, 20, 30, 45]\n      //   }\n      // ]\n    };\n    return (\n      <div className=\"chart-comp-container\">\n        <Line data={data} />\n      </div>\n    );\n  }\n}\nexport default InventoryChart;\n"]},"metadata":{},"sourceType":"module"}